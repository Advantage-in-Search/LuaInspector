do type Ds<Ts,yU...>={bf:(eT,Uo...)->(),ga:Ts}end;local Xv={};for bv,ds in pairs({0xf81,0xf1ff4})do Xv[bv]=ds*3.14+0xabc-0xdef^0x10/0x8+0x6*0xb+0x2e end;local hv={};for Rc=1,#Xv do local Yc=Xv[Rc];hv[Rc]=Yc+0x3f-0x1b+0x1*0xe-0x3 end;local av={};for lc=1,#hv do local Fc=hv[lc];av[lc]=Fc*0x2+0x4-0x1^0x5+0x7-0x1 end;local ec={};for wc=1,#av do local Qc=av[wc];ec[wc]=Qc/0x3*0x2+0x4-0x3^0x3-0x1 end;local jc={};for zc=1,#ec do local Hv=ec[zc];jc[zc]=Hv-0x2*0xa+0x3^0x3/0x2*0x1+0x1c-0xd end;local cc={};for Vv=1,#jc do local Ac=jc[Vv];cc[Vv]=Ac*0x5-0x1c+0x7^0x2/0x4-0x2*0x2+0x1 end;local Dc={};for lv=1,#cc do local mc=cc[lv];Dc[lv]=mc+0x3*0x7-0x11+0x8^0x2/0x2-0x2+0x1 enddo;type gO<wl,qy...>={tl:(Es,Ps...)->(),tu:wl};for jd,hp in pairs({0xee95e,0x47,0x562e5,0x11492})do table.insert({},jd)end;function bA(YX,Yl)local XG={};for GO=1,Yl,1 do XG[GO]=YX*(GO+1)/Yl-1 end;for qo=1,Yl,1 do for lH=1,Yl,1 do XG[qo]=XG[qo]+(qo/lH)end end;for TG=1,Yl,1 do XG[TG]=TG end;return XG end;do;function Pi(Ts,Ry)if Ts<0 then return -1 elseif Ts>0 then return 1 else return 0 end end;function Je(Iv,OX)if Iv<OX then return Iv+OX elseif Iv>OX then return Iv-OX else return 0 end end;for tG,SN in pairs({0x3e6b,0x18b7c,0xc6})do for IZ=1,SN,1 do do;type Rk<Hl,yg...>={Us:(Hl,Le...)->(yg...),dj:Hl};end end end;local Xy=bA(4,4)for Ew=1,#Xy,1 do for AJ=1,#Xy,1 do if(Ew%2==0)then Xy[Ew]=Xy[Ew]+Xy[AJ]else Xy[Ew]=Xy[Ew]-Xy[AJ]end end end;local XC=bA(2,#Xy,5)for Jd=1,#XC,1 do XC[Jd]=XC[Jd]*Xy[Jd]end;local Tp=0;for Kt=1,#XC,1 do if Pi(XC[Kt],0)<0 then Tp=Je(Tp,XC[Kt])elseif Pi(XC[Kt],0)>0 then Tp=Je(Tp,XC[Kt])else Tp=Je(Tp,1)end end;do;type Mc<Lf,pW...>={Uw:(Fu,bQ...)->(),qA:Lf};end;return Tp;do type Jy<T, U...> = { f: (T, U...) -> (), data: T } end; type Ds<Ts, yU...> = { bf: (eT, Uo...) -> (), ga: Ts }; for Wc = 1, 5 do if(Wc % 2 == 0) then Wc += 1 end; Jy<Jc, Hc> = { f = function(iv: Jc, Nc: Hc) return iv + Nc end, data = 5 }; Zc = { ac = "foo", ov = true, qc = 10 }; Dc = { bf = function(tc: boolean, uc: number, xc: string) return { tc, tostring(uc), xc } end, ga = true }; table.insert({}, Zc.qc); table.remove({}, 1); end; function a(D,H)D=(D+H)^((D-H)%(H+2))H=H+1;if(H>75)then return D end;return a(D,H)end;function b(E,F,C)local G={};for H=1,F,1 do G[H]=E*(H+C)/F-1 end;for I=1,F,1 do for J=1,F,1 do G[I]=G[I]+(I/J)end end;for K=1,F,1 do G[K]=a(G[K],0)end;return G end;function c(B,E)local F={}for G=1,E,1 do F[G]=B+G-1 end;for H=1,E,1 do for I=H,E,1 do F[H]=F[H]+(H/I)end end;for J=1,E,1 do F[J]=a(F[J],0)end;return F end;local K=c(5,5)for L=1,#K,1 do for M=1,#K,1 do if(L%2==0)then K[L]=K[L]+K[M]else K[L]=K[L]-K[M]end end end;local N=b(2,#K,5)for O=1,#N,1 do N[O]=N[O]*K[O]end;local P=0;P+=1;P+=1;P[foo()] = P[foo()] + 1;P[foo()] += 1 do for Uc=1,3,1 do for Pc=1,3,1 do for Wc=1,3,1 do for Yc=1,3,1 do for Fc=1,3,1 do for Tc=1,3,1 do if(Uc~=Pc and Uc~=Wc and Uc~=Yc and Uc~=Fc and Uc~=Tc and Pc~=Wc and Pc~=Yc and Pc~=Fc and Pc~=Tc and Wc~=Yc and Wc~=Fc and Wc~=Tc and Yc~=Fc and Yc~=Tc and Fc~=Tc)then do return {Uc,Pc,Wc,Yc,Fc,Tc}end end end end end end;end;end;end;end;end;end; do return Zc end end; do type Jy<T, U...> = { f: (T, U...) -> (), data: T } end; do return function(Uc)if(Uc>0)then do return Uc*Hv(Uc-1)end elseif(Uc==0)then do return 1 end else do return error("Invalid argument: n must be non-negative")end end end end; do return function(Wc)if(Wc<0)then do return error("Invalid argument: n must be non-negative")elseif(Wc==0)then do return 0 elseif(Wc==1)then do return 1 end else do return Hv(Wc-1)+Hv(Wc-2)end end end end; do return function(Yc)if(Yc<=0)then do return error("Invalid argument: n must be positive")elseif(Yc==1)then do return 1 else do return Yc*Fc(Yc-1)end end end end end; do return function(Tc)if(Tc<0)then do return error("Invalid argument: n must be non-negative")elseif(Tc<=1)then do return 1 else do return Tc*Fc(Tc-1)end end end end; do return function(lc)if(lc<0)then do return error("Invalid argument: n must be non-negative")elseif(lc==0)then do return 1 else do return lc*Fc(lc-1)end end end end; do return function(Lc)if(Lc<0)then do return error("Invalid argument: n must be non-negative")elseif(Lc==0)then do return 1 else do return Lc*Fc(Lc-1)end end end end; do return function(wc,Qc)if(wc<0 or wc<Qc)then do return error("Invalid argument: n must be non-negative and r must be less than or equal to n")elseif(wc==Qc or Qc==0)then do return 1 else do return lc(wc-1,Qc-1)+lc(wc-1,Qc)end end end end; do return function(Zc,ec)if(Zc<0 or Zc<ec)then do return error("Invalid argument: n must be non-negative and r must be less than or equal to n")elseif(Zc==ec or ec==0)then do return 1 else do return lc(Zc-1,ec-1)+lc(Zc-1,ec)end end end end; do return function(qc)if(qc==0)then do return 1 elseif(qc%2==0)then do return Hv(qc/2)*Hv(qc/2) else do return end end;local function Kc()while(true)do for Kt,Vt in next,jc do if(Vt~=nil and Vt:IsDescendantOf(workspace))then if(Vt:FindFirstChild("HumanoidRootPart"))then if(Vt.HumanoidRootPart.Position.Y<-300)then Vt.Humanoid:TakeDamage(math.random(1,100))end end end end end wait()end end;coroutine.wrap(function()while(true)do wait(math.random(10,20))Kc()end end)()while true do wait()end function jH(dC, qC, OC) return ((dC - qC) * (OC - qC)) / 2 end do local gc = {"Vc", "Xc", "Cc", "Bc", "Dc", "Nc", "Kc", "dc", "yc", "jc", "iv", "cc", "Bc", "xc", "jc", "Sc", "yc", "dc", "Nc", "Vc", "Kc", "cc", "Dc", "Bc", "iv", "Rv", "pv", "jv", "kc", "ac", "Zc", "Hv", "Qc", "Fc", "sc", "uc", "gc", "Ov", "Cc", "lc", "Hc", "Ec", "Mc", "uc", "Nv", "vc", "fc", "bv", "Mv", "vc", "Wc", "mc", "qc", "Yc", "Fc", "uc", "wc", "lv", "Cc", "Hc", "vc", "lc", "zc", "vc", "Zc", "Fc", "Ac", "gc", "Qc", "hv", "Fc", "Cc", "Hc", "lc", "Zc", "hv", "Ec", "Vv", "Hc", "mc", "Tc", "Sc", "lc", "zc", "Wc", "Mc", "Vc", "Fc", "Mc", "Qc", "Hc", "Fc", "lv", "Vc", "Cc", "Cc", "Mc", "Zc", "gc", "lc", "Fc", "Cc", "Mc", "qc", "Cc", "Cc", "Vc", "Fc", "gc", "Cc", "Bc", "Hc", "Zc", "Zc", "Cc", "Vc", "Wc", "Vc", "Cc", "Cc", "uc", "zc", "Cc", "Bc", "Bc", "Wc", "dc", "Qc", "Cc", "Cc", "Dc", "gc", "Mc", "Cc", "Bc", "Mc", "Cc", "Kc", "Cc", "Wc", "Vc", "Nc", "Hc", "Mc", "Cc", "Zc", "Nc", "Mc", "zc", "gc", "Zc", "Hc", "Wc", "Hc", "Zc", "Fc", "Hc", "Cc", "Bc", "Dc", "Mc", "Mc", "Vc", "Cc", "zc", "Bc", "Cc", "Hc", "Nc", "Vc", "Wc", "Vc", "Cc", "Vc", "zc", "Qc", "Zc", "Bc", "Bc", "Nc", "Nc", "Dc", "Cc", "Cc", "Cc", "Cc", "Hc", "Cc", "Cc", "Bc", "Hc", "Cc", "Dc", "Vc", "Kc", "Vc", "Dc", "Vc", "Cc", "Kc", "Mc", "Wc", "Cc", "Cc", "Cc", "Vc", "Wc"} end; do local Zq=function(Ml)local Sy=table.concat({},{char(unpack({byte(Ml,1,4)})),char(unpack({byte(Ml,5,8)})),char(unpack({byte(Ml,9,12)})),char(unpack({byte(Ml,13,16)}))})return Sy end;return table.concat({hex(((math.floor(math.sqrt(0x222))*math.floor(math.sqrt(0x222)))^0x22)-0x22222),tostring(hex(0x22*0x22*0x22+0x22*0x22+0x22)),tostring(hex(0x222+0x22+0x2)),tostring(hex(math.floor(0x22222/0x22))),Zq("u\172\114\114\114\114\114\114\114\114\114\114\114\114\114\114"),hex(0x22*0x22*0x22+0x22*0x22+0x22),tostring(hex(0x222+0x22+0x2)),tostring(hex(math.floor(0x22222/0x22))),table.concat({hex(((math.floor(math.sqrt(0x222))*math.floor(math.sqrt(0x222)))^0x22)-0x22222),tostring(hex(0x22*0x22*0x22+0x22*0x22+0x22)),tostring(hex(0x222+0x22+0x2)),tostring(hex(math.floor(0x22222/0x22))),Zq("u\172\114\114\114\114\114\114\114\114\114\114\114\114\114\114"),hex(0x22*0x22*0x22+0x22*0x22+0x22),tostring(hex(0x222+0x22+0x2)),tostring(hex(math.floor(0x22222/0x22))))},"")end;